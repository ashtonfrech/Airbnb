#random forests

library(randomForest)

rffit <- randomForest(review_scores_rating ~ recent_review+reviews_per_month+x24_hour_check_in+host_is_superhost
                      +is_apartment+is_house+host_response_rate+availability_365+minimum_nights+price+indoor_fireplace
                      +condo+accommodates+host_total_listings_count+venice_neighbourhood+townhouse+loft+guesthouse+
                        sharedroom+bathrooms+lock_on_bedroom_door+privateroom+santa_monica_neighbourhood+bedrooms
                      +elevator_in_building+long_beach_neighbourhood+maximum_nights+number_of_reviews, data = training, importance = TRUE, na.action=na.omit, ntree = 50)
plot(rffit)
print(rffit)
varImpPlot(rffit)
#predict on the training data for training dataset
predict_train_rf=predict(rffit, training)


#R square, MAE, MSE, RMSE
R2(predict_train_rf,training$review_scores_rating,form="traditional")
MAE(predict_train_rf,training$review_scores_rating)
MSE(predict_train_rf,training$review_scores_rating)
RMSE(predict_train_rf,training$review_scores_rating)



#check testing data
predict_test_rf=predict(rffit, test)

#R square, MAE, MSE, RMSE
R2(predict_test_rf,test$review_scores_rating,form="traditional")
MAE(predict_test_rf,test$review_scores_rating)
MSE(predict_test_rf,test$review_scores_rating)
RMSE(predict_test_rf,test$review_scores_rating)
